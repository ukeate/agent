# 强化学习系统依赖服务配置 (PostgreSQL, Redis, 向量数据库)

---
# PostgreSQL 配置
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secrets
  namespace: rl-system
type: Opaque
data:
  POSTGRES_PASSWORD: cG9zdGdyZXNxbA==  # postgresql
  POSTGRES_USER: cG9zdGdyZXM=  # postgres
  POSTGRES_DB: cmxfc3lzdGVt  # rl_system

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: rl-system
data:
  postgresql.conf: |
    # PostgreSQL优化配置
    shared_buffers = 256MB
    effective_cache_size = 1GB
    work_mem = 16MB
    maintenance_work_mem = 64MB
    random_page_cost = 1.1
    effective_io_concurrency = 200
    
    # 连接配置
    max_connections = 200
    superuser_reserved_connections = 3
    
    # WAL配置
    wal_level = replica
    max_wal_size = 1GB
    min_wal_size = 80MB
    checkpoint_completion_target = 0.9
    
    # 日志配置
    log_destination = 'stderr'
    logging_collector = on
    log_directory = 'pg_log'
    log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
    log_statement = 'mod'
    log_min_duration_statement = 1000
    
    # 强化学习特定优化
    shared_preload_libraries = 'pg_stat_statements,pg_hint_plan'
    pg_stat_statements.track = all
    
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: rl-system
spec:
  serviceName: postgres-service
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        envFrom:
        - secretRef:
            name: postgres-secrets
        ports:
        - containerPort: 5432
          name: postgres
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: postgres-config-volume
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-config-volume
        configMap:
          name: postgres-config
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 20Gi
      storageClassName: fast-ssd

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: rl-system
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP

---
# Redis 配置
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
  namespace: rl-system
data:
  redis.conf: |
    # Redis强化学习系统优化配置
    maxmemory 1gb
    maxmemory-policy allkeys-lru
    
    # 持久化配置
    save 900 1
    save 300 10
    save 60 10000
    
    # AOF配置
    appendonly yes
    appendfsync everysec
    
    # 网络配置
    tcp-keepalive 60
    timeout 0
    
    # 安全配置
    requirepass ${REDIS_PASSWORD}
    
    # 性能优化
    hash-max-ziplist-entries 512
    hash-max-ziplist-value 64
    list-max-ziplist-size -2
    set-max-intset-entries 512
    zset-max-ziplist-entries 128
    zset-max-ziplist-value 64
    
    # 慢日志
    slowlog-log-slower-than 10000
    slowlog-max-len 128

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: rl-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        command: ["redis-server", "/etc/redis/redis.conf"]
        ports:
        - containerPort: 6379
          name: redis
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: rl-system-secrets
              key: REDIS_PASSWORD
        volumeMounts:
        - name: redis-config-volume
          mountPath: /etc/redis
        - name: redis-data
          mountPath: /data
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: redis-config-volume
        configMap:
          name: redis-config
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-pvc

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: rl-system
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: fast-ssd

---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: rl-system
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP

---
# Qdrant 向量数据库配置
apiVersion: v1
kind: ConfigMap
metadata:
  name: qdrant-config
  namespace: rl-system
data:
  config.yaml: |
    log_level: INFO
    
    storage:
      storage_path: /qdrant/storage
      snapshots_path: /qdrant/snapshots
      temp_path: /qdrant/temp
      
    service:
      host: 0.0.0.0
      port: 6333
      grpc_port: 6334
      
    cluster:
      enabled: false
      
    telemetry:
      enabled: true
      
    optimizer:
      deleted_threshold: 0.2
      vacuum_min_vector_number: 1000
      default_segment_number: 0
      max_segment_size_kb: 200000
      memmap_threshold_kb: 200000
      indexing_threshold_kb: 20000
      flush_interval_sec: 5
      max_optimization_threads: 2

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: qdrant
  namespace: rl-system
spec:
  serviceName: qdrant-service
  replicas: 1
  selector:
    matchLabels:
      app: qdrant
  template:
    metadata:
      labels:
        app: qdrant
    spec:
      containers:
      - name: qdrant
        image: qdrant/qdrant:v1.7.0
        ports:
        - containerPort: 6333
          name: http
        - containerPort: 6334
          name: grpc
        volumeMounts:
        - name: qdrant-data
          mountPath: /qdrant/storage
        - name: qdrant-config-volume
          mountPath: /qdrant/config
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 6333
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /readiness
            port: 6333
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: qdrant-config-volume
        configMap:
          name: qdrant-config
  volumeClaimTemplates:
  - metadata:
      name: qdrant-data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 20Gi
      storageClassName: fast-ssd

---
apiVersion: v1
kind: Service
metadata:
  name: qdrant-service
  namespace: rl-system
spec:
  selector:
    app: qdrant
  ports:
  - name: http
    port: 6333
    targetPort: 6333
  - name: grpc
    port: 6334
    targetPort: 6334
  type: ClusterIP

---
# 数据库初始化Job
apiVersion: batch/v1
kind: Job
metadata:
  name: rl-system-db-init
  namespace: rl-system
spec:
  template:
    spec:
      containers:
      - name: db-init
        image: rl-system:1.0.0
        command: ["python", "scripts/init_database.py"]
        envFrom:
        - configMapRef:
            name: rl-system-config
        - secretRef:
            name: rl-system-secrets
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      restartPolicy: OnFailure
      backoffLimit: 3

---
# 数据库迁移Job
apiVersion: batch/v1
kind: Job
metadata:
  name: rl-system-db-migrate
  namespace: rl-system
spec:
  template:
    spec:
      containers:
      - name: db-migrate
        image: rl-system:1.0.0
        command: ["python", "scripts/migrate_database.py"]
        envFrom:
        - configMapRef:
            name: rl-system-config
        - secretRef:
            name: rl-system-secrets
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      restartPolicy: OnFailure
      backoffLimit: 3