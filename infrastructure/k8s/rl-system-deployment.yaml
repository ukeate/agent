# 强化学习系统Kubernetes部署配置

---
# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: rl-system
  labels:
    name: rl-system
    team: ai-platform
    environment: production

---
# ConfigMap - 应用配置
apiVersion: v1
kind: ConfigMap
metadata:
  name: rl-system-config
  namespace: rl-system
data:
  APP_ENV: "production"
  LOG_LEVEL: "INFO"
  REDIS_HOST: "redis-service"
  REDIS_PORT: "6379"
  POSTGRES_HOST: "postgres-service"
  POSTGRES_PORT: "5432"
  POSTGRES_DB: "rl_system"
  MONITORING_ENABLED: "true"
  CACHE_TTL_SECONDS: "300"
  MAX_CACHE_SIZE: "10000"
  DEFAULT_ALGORITHM: "ucb"
  ENABLE_COLD_START: "true"
  ENABLE_EVALUATION: "true"

---
# Secret - 敏感配置
apiVersion: v1
kind: Secret
metadata:
  name: rl-system-secrets
  namespace: rl-system
type: Opaque
data:
  # Base64编码的密钥 (示例，实际部署时需要替换)
  POSTGRES_USER: cm9vdA==  # root
  POSTGRES_PASSWORD: cGFzc3dvcmQ=  # password
  REDIS_PASSWORD: cmVkaXNwYXNz  # redispass
  JWT_SECRET: c2VjcmV0a2V5  # secretkey
  ENCRYPTION_KEY: ZW5jcnlwdGlvbmtleQ==  # encryptionkey

---
# Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: rl-system-sa
  namespace: rl-system
  labels:
    app: rl-system

---
# Deployment - 主应用
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rl-system-api
  namespace: rl-system
  labels:
    app: rl-system-api
    component: backend
    version: v1.0.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: rl-system-api
  template:
    metadata:
      labels:
        app: rl-system-api
        component: backend
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: rl-system-sa
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        runAsNonRoot: true
      containers:
      - name: rl-system-api
        image: rl-system:1.0.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        env:
        - name: PORT
          value: "8000"
        - name: WORKERS
          value: "4"
        envFrom:
        - configMapRef:
            name: rl-system-config
        - secretRef:
            name: rl-system-secrets
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /health/live
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health/startup
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        volumeMounts:
        - name: app-logs
          mountPath: /app/logs
        - name: tmp-volume
          mountPath: /tmp
      volumes:
      - name: app-logs
        emptyDir: {}
      - name: tmp-volume
        emptyDir: {}
      terminationGracePeriodSeconds: 30
      restartPolicy: Always

---
# Service - 负载均衡
apiVersion: v1
kind: Service
metadata:
  name: rl-system-service
  namespace: rl-system
  labels:
    app: rl-system-api
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
spec:
  type: ClusterIP
  selector:
    app: rl-system-api
  ports:
  - name: http
    port: 80
    targetPort: 8000
    protocol: TCP
  sessionAffinity: None

---
# HorizontalPodAutoscaler - 自动扩缩容
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: rl-system-hpa
  namespace: rl-system
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: rl-system-api
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: rl_recommendation_requests_per_second
      target:
        type: AverageValue
        averageValue: "100"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max

---
# PodDisruptionBudget - 中断预算
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: rl-system-pdb
  namespace: rl-system
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: rl-system-api

---
# NetworkPolicy - 网络策略
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: rl-system-network-policy
  namespace: rl-system
spec:
  podSelector:
    matchLabels:
      app: rl-system-api
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 8000
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: database
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - namespaceSelector:
        matchLabels:
          name: cache
    ports:
    - protocol: TCP
      port: 6379
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53

---
# ServiceMonitor - Prometheus监控
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: rl-system-monitor
  namespace: rl-system
  labels:
    app: rl-system-api
spec:
  selector:
    matchLabels:
      app: rl-system-api
  endpoints:
  - port: http
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s
  namespaceSelector:
    matchNames:
    - rl-system