services:
  # PostgreSQL数据库 with pgvector 0.8.0
  postgres:
    image: pgvector/pgvector:pg17
    container_name: ai-agent-postgres
    environment:
      POSTGRES_DB: ai_agent_db
      POSTGRES_USER: ai_agent_user
      POSTGRES_PASSWORD: ai_agent_password
      # pgvector优化配置
      POSTGRES_SHARED_PRELOAD_LIBRARIES: 'vector'
      POSTGRES_MAX_CONNECTIONS: '200'
      # 性能优化参数
      POSTGRES_SHARED_BUFFERS: '256MB'
      POSTGRES_EFFECTIVE_CACHE_SIZE: '1GB'
      POSTGRES_MAINTENANCE_WORK_MEM: '512MB'
      POSTGRES_MAX_PARALLEL_MAINTENANCE_WORKERS: '4'
      POSTGRES_MAX_PARALLEL_WORKERS_PER_GATHER: '2'
      POSTGRES_MAX_PARALLEL_WORKERS: '8'
      POSTGRES_RANDOM_PAGE_COST: '1.1'
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./pgvector_init.sql:/docker-entrypoint-initdb.d/pgvector_init.sql
    restart: unless-stopped
    networks:
      - ai-agent-network
    command: >
      postgres
      -c shared_preload_libraries=vector
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=512MB
      -c max_parallel_maintenance_workers=4
      -c max_parallel_workers_per_gather=2
      -c max_parallel_workers=8
      -c random_page_cost=1.1
      -c log_statement=all

  # Redis缓存
  redis:
    image: redis:7.2-alpine
    container_name: ai-agent-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - ai-agent-network
    command: redis-server --appendonly yes

  # Qdrant向量数据库
  qdrant:
    image: qdrant/qdrant:v1.7.0
    container_name: ai-agent-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    restart: unless-stopped
    networks:
      - ai-agent-network

  # etcd集群 - 节点1
  etcd1:
    image: quay.io/coreos/etcd:v3.5.10
    container_name: ai-agent-etcd1
    environment:
      ETCD_NAME: etcd1
      ETCD_INITIAL_ADVERTISE_PEER_URLS: http://etcd1:2380
      ETCD_LISTEN_PEER_URLS: http://0.0.0.0:2380
      ETCD_LISTEN_CLIENT_URLS: http://0.0.0.0:2379
      ETCD_ADVERTISE_CLIENT_URLS: http://etcd1:2379
      ETCD_INITIAL_CLUSTER_TOKEN: ai-agent-cluster
      ETCD_INITIAL_CLUSTER: etcd1=http://etcd1:2380,etcd2=http://etcd2:2380,etcd3=http://etcd3:2380
      ETCD_INITIAL_CLUSTER_STATE: new
      ETCD_DATA_DIR: /etcd-data
      ETCD_LOG_LEVEL: info
      ETCD_LOGGER: zap
      ETCD_LOG_OUTPUTS: stderr
      ETCD_AUTO_COMPACTION_MODE: periodic
      ETCD_AUTO_COMPACTION_RETENTION: "1"
      ETCD_QUOTA_BACKEND_BYTES: 8589934592  # 8GB
      ETCD_HEARTBEAT_INTERVAL: 100
      ETCD_ELECTION_TIMEOUT: 1000
      ETCD_MAX_REQUEST_BYTES: 33554432  # 32MB
    ports:
      - "2379:2379"
      - "2380:2380"
    volumes:
      - etcd1_data:/etcd-data
    restart: unless-stopped
    networks:
      - ai-agent-network
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # etcd集群 - 节点2
  etcd2:
    image: quay.io/coreos/etcd:v3.5.10
    container_name: ai-agent-etcd2
    environment:
      ETCD_NAME: etcd2
      ETCD_INITIAL_ADVERTISE_PEER_URLS: http://etcd2:2380
      ETCD_LISTEN_PEER_URLS: http://0.0.0.0:2380
      ETCD_LISTEN_CLIENT_URLS: http://0.0.0.0:2379
      ETCD_ADVERTISE_CLIENT_URLS: http://etcd2:2379
      ETCD_INITIAL_CLUSTER_TOKEN: ai-agent-cluster
      ETCD_INITIAL_CLUSTER: etcd1=http://etcd1:2380,etcd2=http://etcd2:2380,etcd3=http://etcd3:2380
      ETCD_INITIAL_CLUSTER_STATE: new
      ETCD_DATA_DIR: /etcd-data
      ETCD_LOG_LEVEL: info
      ETCD_LOGGER: zap
      ETCD_LOG_OUTPUTS: stderr
      ETCD_AUTO_COMPACTION_MODE: periodic
      ETCD_AUTO_COMPACTION_RETENTION: "1"
      ETCD_QUOTA_BACKEND_BYTES: 8589934592  # 8GB
      ETCD_HEARTBEAT_INTERVAL: 100
      ETCD_ELECTION_TIMEOUT: 1000
      ETCD_MAX_REQUEST_BYTES: 33554432  # 32MB
    ports:
      - "2389:2379"
      - "2390:2380"
    volumes:
      - etcd2_data:/etcd-data
    restart: unless-stopped
    networks:
      - ai-agent-network
    depends_on:
      - etcd1
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # etcd集群 - 节点3
  etcd3:
    image: quay.io/coreos/etcd:v3.5.10
    container_name: ai-agent-etcd3
    environment:
      ETCD_NAME: etcd3
      ETCD_INITIAL_ADVERTISE_PEER_URLS: http://etcd3:2380
      ETCD_LISTEN_PEER_URLS: http://0.0.0.0:2380
      ETCD_LISTEN_CLIENT_URLS: http://0.0.0.0:2379
      ETCD_ADVERTISE_CLIENT_URLS: http://etcd3:2379
      ETCD_INITIAL_CLUSTER_TOKEN: ai-agent-cluster
      ETCD_INITIAL_CLUSTER: etcd1=http://etcd1:2380,etcd2=http://etcd2:2380,etcd3=http://etcd3:2380
      ETCD_INITIAL_CLUSTER_STATE: new
      ETCD_DATA_DIR: /etcd-data
      ETCD_LOG_LEVEL: info
      ETCD_LOGGER: zap
      ETCD_LOG_OUTPUTS: stderr
      ETCD_AUTO_COMPACTION_MODE: periodic
      ETCD_AUTO_COMPACTION_RETENTION: "1"
      ETCD_QUOTA_BACKEND_BYTES: 8589934592  # 8GB
      ETCD_HEARTBEAT_INTERVAL: 100
      ETCD_ELECTION_TIMEOUT: 1000
      ETCD_MAX_REQUEST_BYTES: 33554432  # 32MB
    ports:
      - "2399:2379"
      - "2398:2380"
    volumes:
      - etcd3_data:/etcd-data
    restart: unless-stopped
    networks:
      - ai-agent-network
    depends_on:
      - etcd1
      - etcd2
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Neo4j图数据库
  neo4j:
    image: neo4j:5.15-community
    container_name: ai-agent-neo4j
    environment:
      # 认证配置
      NEO4J_AUTH: neo4j/password
      
      # 数据库配置
      NEO4J_PLUGINS: '["apoc", "n10s", "graph-data-science"]'
      NEO4J_dbms_default__database: neo4j
      NEO4J_dbms_allow__upgrade: 'true'
      
      # 内存配置
      NEO4J_dbms_memory_heap_initial__size: 1G
      NEO4J_dbms_memory_heap_max__size: 2G
      NEO4J_dbms_memory_pagecache_size: 1G
      
      # 连接池配置
      NEO4J_dbms_connector_bolt_listen__address: 0.0.0.0:7687
      NEO4J_dbms_connector_http_listen__address: 0.0.0.0:7474
      NEO4J_dbms_connector_https_listen__address: 0.0.0.0:7473
      NEO4J_dbms_routing_listen__address: 0.0.0.0:7688
      NEO4J_dbms_discovery_listen__address: 0.0.0.0:5000
      
      # 性能优化
      NEO4J_dbms_tx__log_rotation_retention__policy: '100M size'
      NEO4J_dbms_checkpoint_interval: '300s'
      NEO4J_dbms_recovery_fail__on__missing__files: 'false'
      NEO4J_dbms_logs_query_enabled: 'INFO'
      NEO4J_dbms_logs_query_threshold: '1s'
      
      # 安全配置
      NEO4J_dbms_security_procedures_unrestricted: 'apoc.*,n10s.*,gds.*'
      NEO4J_dbms_security_procedures_allowlist: 'apoc.*,n10s.*,gds.*'
      
      # 集群配置（为分布式部署做准备）
      NEO4J_dbms_mode: SINGLE
      NEO4J_causal__clustering_minimum__core__cluster__size__at__formation: 3
      NEO4J_causal__clustering_minimum__core__cluster__size__at__runtime: 3
      NEO4J_causal__clustering_initial__discovery__members: neo4j:5000
      
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
      - "7473:7473"  # HTTPS
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    restart: unless-stopped
    networks:
      - ai-agent-network
    healthcheck:
      test: ["CMD-SHELL", "cypher-shell -u neo4j -p password 'RETURN 1'"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s

  # pgAdmin (可选，用于数据库管理)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: ai-agent-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@aiagent.com
      PGADMIN_DEFAULT_PASSWORD: admin123
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - ai-agent-network
    profiles:
      - tools

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  qdrant_data:
    driver: local
  etcd1_data:
    driver: local
  etcd2_data:
    driver: local
  etcd3_data:
    driver: local
  pgadmin_data:
    driver: local
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  neo4j_import:
    driver: local
  neo4j_plugins:
    driver: local

networks:
  ai-agent-network:
    driver: bridge